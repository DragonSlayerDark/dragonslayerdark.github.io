{"ast":null,"code":"import { equal } from '@wry/equality';\nimport { graphQLResultHasError } from '../utilities/common/errorHandling.js';\nimport { isNonEmptyArray } from '../utilities/common/arrays.js';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus.js';\n\nvar QueryInfo = function () {\n  function QueryInfo(cache) {\n    this.cache = cache;\n    this.listeners = new Set();\n    this.document = null;\n    this.lastRequestId = 1;\n    this.subscriptions = new Set();\n    this.dirty = false;\n    this.diff = null;\n    this.observableQuery = null;\n  }\n\n  QueryInfo.prototype.init = function (query) {\n    var networkStatus = query.networkStatus || NetworkStatus.loading;\n\n    if (this.variables && this.networkStatus !== NetworkStatus.loading && !equal(this.variables, query.variables)) {\n      networkStatus = NetworkStatus.setVariables;\n    }\n\n    Object.assign(this, {\n      document: query.document,\n      variables: query.variables,\n      networkError: null,\n      graphQLErrors: this.graphQLErrors || [],\n      networkStatus: networkStatus\n    });\n\n    if (query.observableQuery) {\n      this.setObservableQuery(query.observableQuery);\n    }\n\n    if (query.lastRequestId) {\n      this.lastRequestId = query.lastRequestId;\n    }\n\n    return this;\n  };\n\n  QueryInfo.prototype.setDirty = function () {\n    var _this = this;\n\n    if (!this.dirty) {\n      this.dirty = true;\n\n      if (!this.notifyTimeout) {\n        this.notifyTimeout = setTimeout(function () {\n          return _this.notify();\n        }, 0);\n      }\n    }\n\n    return this;\n  };\n\n  QueryInfo.prototype.setDiff = function (diff) {\n    var oldDiff = this.diff;\n    this.diff = diff;\n\n    if (!this.dirty && (diff === null || diff === void 0 ? void 0 : diff.result) !== (oldDiff === null || oldDiff === void 0 ? void 0 : oldDiff.result)) {\n      this.setDirty();\n    }\n  };\n\n  QueryInfo.prototype.setObservableQuery = function (oq) {\n    if (oq === this.observableQuery) return;\n\n    if (this.oqListener) {\n      this.listeners.delete(this.oqListener);\n    }\n\n    this.observableQuery = oq;\n\n    if (oq) {\n      this.listeners.add(this.oqListener = function () {\n        return oq.reobserve();\n      });\n    } else {\n      delete this.oqListener;\n    }\n  };\n\n  QueryInfo.prototype.notify = function () {\n    var _this = this;\n\n    if (this.notifyTimeout) {\n      clearTimeout(this.notifyTimeout);\n      this.notifyTimeout = void 0;\n    }\n\n    if (this.shouldNotify()) {\n      this.listeners.forEach(function (listener) {\n        return listener(_this);\n      });\n    }\n\n    this.dirty = false;\n  };\n\n  QueryInfo.prototype.shouldNotify = function () {\n    if (!this.dirty || !this.listeners.size) {\n      return false;\n    }\n\n    if (isNetworkRequestInFlight(this.networkStatus) && this.observableQuery) {\n      var fetchPolicy = this.observableQuery.options.fetchPolicy;\n\n      if (fetchPolicy !== \"cache-only\" && fetchPolicy !== \"cache-and-network\") {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  QueryInfo.prototype.stop = function () {\n    this.cancel();\n    delete this.cancel;\n    this.variables = this.networkStatus = this.networkError = this.graphQLErrors = this.lastWatch = this.lastWrittenResult = this.lastWrittenVars = void 0;\n    var oq = this.observableQuery;\n    if (oq) oq.stopPolling();\n  };\n\n  QueryInfo.prototype.cancel = function () {};\n\n  QueryInfo.prototype.updateWatch = function (variables) {\n    var _this = this;\n\n    if (!this.lastWatch || this.lastWatch.query !== this.document || !equal(variables, this.lastWatch.variables)) {\n      this.cancel();\n      this.cancel = this.cache.watch(this.lastWatch = {\n        query: this.document,\n        variables: variables,\n        optimistic: true,\n        callback: function (diff) {\n          return _this.setDiff(diff);\n        }\n      });\n    }\n\n    return this;\n  };\n\n  QueryInfo.prototype.markResult = function (result, options, allowCacheWrite) {\n    var _this = this;\n\n    this.graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n\n    if (options.fetchPolicy === 'no-cache') {\n      this.diff = {\n        result: result.data,\n        complete: true\n      };\n    } else if (allowCacheWrite) {\n      var ignoreErrors = options.errorPolicy === 'ignore' || options.errorPolicy === 'all';\n      var writeWithErrors = !graphQLResultHasError(result);\n\n      if (!writeWithErrors && ignoreErrors && result.data) {\n        writeWithErrors = true;\n      }\n\n      if (writeWithErrors) {\n        this.cache.performTransaction(function (cache) {\n          if (equal(result, _this.lastWrittenResult) && equal(options.variables, _this.lastWrittenVars)) {\n            if (_this.diff && _this.diff.complete) {\n              result.data = _this.diff.result;\n              return;\n            }\n          } else {\n            cache.writeQuery({\n              query: _this.document,\n              data: result.data,\n              variables: options.variables\n            });\n            _this.lastWrittenResult = result;\n            _this.lastWrittenVars = options.variables;\n          }\n\n          var diff = cache.diff({\n            query: _this.document,\n            variables: options.variables,\n            returnPartialData: true,\n            optimistic: true\n          });\n          _this.diff = diff;\n\n          if (diff.complete) {\n            result.data = diff.result;\n          }\n        });\n      } else {\n        this.lastWrittenResult = this.lastWrittenVars = void 0;\n      }\n    }\n  };\n\n  QueryInfo.prototype.markReady = function () {\n    this.networkError = null;\n    return this.networkStatus = NetworkStatus.ready;\n  };\n\n  QueryInfo.prototype.markError = function (error) {\n    this.networkStatus = NetworkStatus.error;\n    this.lastWrittenResult = this.lastWrittenVars = void 0;\n\n    if (error.graphQLErrors) {\n      this.graphQLErrors = error.graphQLErrors;\n    }\n\n    if (error.networkError) {\n      this.networkError = error.networkError;\n    }\n\n    return error;\n  };\n\n  return QueryInfo;\n}();\n\nexport { QueryInfo }; //# sourceMappingURL=QueryInfo.js.map","map":null,"metadata":{},"sourceType":"module"}