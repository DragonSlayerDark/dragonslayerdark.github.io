{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { map, switchMap, tap } from 'rxjs';\nimport * as fromProduct from '../actions/product.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/product.service\";\nimport * as i3 from \"../../custom/services/app.service\";\nexport let ProductEffects = /*#__PURE__*/(() => {\n  class ProductEffects {\n    constructor(actions$, productService, appService) {\n      this.actions$ = actions$;\n      this.productService = productService;\n      this.appService = appService;\n      this.loadProducts$ = createEffect(() => this.actions$.pipe(ofType(fromProduct.loadProducts), switchMap(({\n        page\n      }) => {\n        return this.productService.getProducts(page).pipe(map(x => {\n          return fromProduct.loadProductsSuccess({\n            products: x.data\n          });\n        }));\n      })));\n      this.loadProductsSuccess$ = createEffect(() => this.actions$.pipe(ofType(fromProduct.loadProductsSuccess), tap(action => {// localStorage.removeItem('cart');\n      })), {\n        dispatch: false\n      });\n      this.loadProductsById$ = createEffect(() => this.actions$.pipe(ofType(fromProduct.loadProductsById), switchMap(({\n        pet_type_id\n      }) => {\n        return this.productService.getProductsBySubCategoryId(pet_type_id).pipe(map(x => {\n          return fromProduct.loadProductsByIdSuccess({\n            products: x.data\n          });\n        }));\n      })));\n      this.loadProductsByPetTypeId$ = createEffect(() => this.actions$.pipe(ofType(fromProduct.loadProductsByPetTypeId), switchMap(({\n        pet_type_id,\n        page\n      }) => {\n        return this.productService.getProductsByPetTypeId(pet_type_id, page).pipe(map(x => {\n          return fromProduct.loadProductsByIdSuccess({\n            products: x.data\n          });\n        }), tap(() => {\n          this.appService.onActivate();\n        }));\n      })));\n      this.loadProduct$ = createEffect(() => this.actions$.pipe(ofType(fromProduct.loadProduct), switchMap(({\n        id\n      }) => {\n        return this.productService.getProduct(id).pipe(map(x => {\n          return fromProduct.loadProductSuccess({\n            product: x.data\n          });\n        }));\n      })));\n      this.loadVaccineProducts$ = createEffect(() => this.actions$.pipe(ofType(fromProduct.loadVaccineProducts), switchMap(({\n        id1,\n        id2\n      }) => {\n        return this.productService.getVaccineProducts(id1, id2).pipe(map(x => {\n          return fromProduct.loadVaccineProductsSuccess({\n            products: x.data\n          });\n        }), tap(() => {\n          this.appService.onActivate();\n        }));\n      })));\n    }\n\n  }\n\n  ProductEffects.ɵfac = function ProductEffects_Factory(t) {\n    return new (t || ProductEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.ProductService), i0.ɵɵinject(i3.AppService));\n  };\n\n  ProductEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductEffects,\n    factory: ProductEffects.ɵfac\n  });\n  return ProductEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}