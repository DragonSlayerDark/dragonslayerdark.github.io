{"ast":null,"code":"import { gql } from 'apollo-angular';\nimport { map } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/auth_services/store/auth.service\";\nimport * as i3 from \"apollo-angular\";\nexport let CartService = /*#__PURE__*/(() => {\n  class CartService {\n    constructor(http, authService, apollo) {\n      this.http = http;\n      this.authService = authService;\n      this.apollo = apollo;\n    }\n\n    createPayment(token, orderID, amount) {\n      return this.http.post(`${environment.payment}/createPayment`, {\n        source: token,\n        amount,\n        description: \"Test\",\n        billing: {\n          adress: \"Test\",\n          email: environment.production ? this.authService.getUser().email : \"accept@netpay.com.mx\",\n          firstName: this.authService.getUser().firstName,\n          lastName: this.authService.getUser().lastName,\n          merchantReferenceCode: orderID,\n          phone: \"1234567890\",\n          address: {\n            city: \"JUAREZ\",\n            country: \"MX\",\n            postalCode: \"66269\",\n            state: \"CHIHUAHUA\",\n            street1: \"Humberto Junco Voigt, México 2307-2o Sector, Santa Engracia\"\n          }\n        }\n      });\n    }\n\n    confirmPayment(token) {\n      return this.http.post(`${environment.payment}/confirmPayment/${token}`, {});\n    }\n\n    getOrderInfo(token) {\n      return this.http.post(`${environment.payment}/transactions/${token}`, {});\n    }\n\n    createOrder(addressID) {\n      let products = JSON.parse(localStorage.getItem('cart'));\n      let cart = products.map(x => {\n        return {\n          product: x.product.id,\n          quantity: x.quantity\n        };\n      });\n      let pet = JSON.parse(localStorage.getItem('selectedPetID'));\n      return this.http.post(`${environment.server}/api/orders?populate=*`, {\n        data: {\n          user: this.authService.getId(),\n          payment: null,\n          orderDate: new Date(),\n          subtotal: 0,\n          tax: 0,\n          // IDS of the products\n          products: cart,\n          deliveryAddress: addressID,\n          pet\n        }\n      });\n    }\n\n    updatePaymentResponse(orderID, paymentResponse) {\n      // convert paymentResponse to a string with JSON.stringify, trying to escaping the double quotes\n      let payment = JSON.stringify(paymentResponse).replace(/\"/g, '\\\\\"');\n      return this.apollo.mutate({\n        mutation: gql`\n        mutation {\n          updateOrder(id: \"${orderID}\", data: { payment: \"${payment}\"}) {\n            data {\n              id\n              attributes {\n                createdAt\n                subtotal\n                products {\n                  product {\n                    data {\n                      id\n                      attributes {\n                        name\n                        subtotal\n                      }\n                    }\n                  }\n                }\n                user {\n                  data {\n                    attributes {\n                      email\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      `\n      }).pipe(map(x => {\n        return x['data']; // return x['data'].updateOrder.data;\n      }));\n    }\n\n    getNetpayClient() {\n      return this.http.get(`${environment.payment}/me`).pipe(map(x => {\n        return x['data'];\n      }));\n    }\n\n  }\n\n  CartService.ɵfac = function CartService_Factory(t) {\n    return new (t || CartService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.Apollo));\n  };\n\n  CartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartService,\n    factory: CartService.ɵfac,\n    providedIn: 'root'\n  });\n  return CartService;\n})();","map":null,"metadata":{},"sourceType":"module"}