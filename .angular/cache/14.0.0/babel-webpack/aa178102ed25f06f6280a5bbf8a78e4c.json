{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { select } from '@ngrx/store';\nimport { catchError, map, of, switchMap, tap, withLatestFrom } from 'rxjs';\nimport * as addressActions from '../../entities/actions/address.actions';\nimport { selectAllAddress } from '../../entities/selectors/address.selectors';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/address.service\";\nimport * as i3 from \"@ngrx/store\";\nimport * as i4 from \"src/app/auth_services/store/auth.service\";\nimport * as i5 from \"src/app/modules/shared/shared.service\";\nimport * as i6 from \"@angular/router\";\nexport let AddressEffects = /*#__PURE__*/(() => {\n  class AddressEffects {\n    constructor(actions$, addressService, store, auth, shared, router) {\n      this.actions$ = actions$;\n      this.addressService = addressService;\n      this.store = store;\n      this.auth = auth;\n      this.shared = shared;\n      this.router = router;\n      this.loadAddresses$ = createEffect(() => {\n        return this.actions$.pipe(ofType(addressActions.loadAddresses), switchMap(({\n          userID\n        }) => this.addressService.getAddresses(userID).pipe(map(data => {\n          return addressActions.loadAddressesSuccess({\n            addresses: data\n          });\n        }), catchError(error => of(addressActions.failure({\n          error\n        }))))));\n      });\n      this.deleteAddress$ = createEffect(() => {\n        return this.actions$.pipe(ofType(addressActions.deleteAddress), withLatestFrom(this.store.pipe(select(selectAllAddress))), switchMap(([{\n          id\n        }, address]) => this.addressService.deleteAddress(id, address).pipe(map(data => addressActions.deleteAddressSuccess({\n          address: data\n        })), catchError(error => of(addressActions.failure({\n          error\n        }))))), tap(() => {\n          this.shared.sendAlert('success', 'Exito', 'Direccion eliminada con exito');\n          this.router.navigate(['/profile', 'adresslist']);\n        }));\n      });\n      this.addAddress$ = createEffect(() => {\n        return this.actions$.pipe(ofType(addressActions.addAddress), withLatestFrom(this.store.pipe(select(selectAllAddress))), switchMap(([{\n          city,\n          country,\n          state,\n          street,\n          zip,\n          name\n        }, addresses]) => this.addressService.addAddress(city, country, state, street, zip, name, addresses).pipe(map(data => addressActions.addAddressSuccess({\n          address: data\n        })), catchError(error => of(addressActions.failure({\n          error\n        }))))), tap(() => {\n          this.shared.sendAlert('success', 'Dirección Agregada', 'Dirección agregada correctamente a lista de direcciones');\n          let route = this.router.url;\n\n          if (route === '/profile/createAddress') {\n            this.router.navigate(['profile', 'adresslist']);\n          }\n        }));\n      });\n      this.updateAddress$ = createEffect(() => {\n        return this.actions$.pipe(ofType(addressActions.updateAddress), withLatestFrom(this.store.pipe(select(selectAllAddress))), switchMap(([{\n          id,\n          city,\n          country,\n          state,\n          street,\n          zip,\n          name\n        }, address]) => this.addressService.updateAddress(id, city, country, state, street, zip, name, address).pipe(map(data => addressActions.updateAddressSuccess({\n          address: data\n        })), catchError(error => of(addressActions.failure({\n          error\n        }))))), tap(() => {\n          this.shared.sendAlert('success', 'Exito', 'Direccion modificada con exito');\n          this.router.navigate(['/profile', 'adresslist']);\n        }));\n      });\n    }\n\n  }\n\n  AddressEffects.ɵfac = function AddressEffects_Factory(t) {\n    return new (t || AddressEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.AddressService), i0.ɵɵinject(i3.Store), i0.ɵɵinject(i4.AuthService), i0.ɵɵinject(i5.SharedService), i0.ɵɵinject(i6.Router));\n  };\n\n  AddressEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AddressEffects,\n    factory: AddressEffects.ɵfac,\n    providedIn: 'root'\n  });\n  return AddressEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}