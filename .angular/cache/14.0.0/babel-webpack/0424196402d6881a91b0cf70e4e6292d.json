{"ast":null,"code":"import { finalize } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { addRequestToQueue, removeRequestFromQueue } from 'src/app/store/custom/actions/pawl.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../store/auth.service\";\nimport * as i2 from \"@ngrx/store\";\nexport let TokenInterceptorService = /*#__PURE__*/(() => {\n  class TokenInterceptorService {\n    constructor(auth, store) {\n      this.auth = auth;\n      this.store = store;\n    }\n\n    intercept(req, next) {\n      if (!req.url.includes('api/auth/local') && !req.url.includes('auth') || req.url.includes(environment.payment)) {\n        if (this.auth.isAuthCheck()) {\n          let headers = {\n            Authorization: `Bearer ${this.auth.getToken()}`\n          };\n\n          if (req.url.includes(environment.payment)) {\n            // if is a payment request\n            console.log('payment request');\n            headers = Object.assign(Object.assign({}, headers), {\n              project: environment.projectID,\n              user: this.auth.getUser().id + \"\"\n            });\n          }\n\n          req = req.clone({\n            setHeaders: headers\n          });\n        }\n      }\n\n      this.store.dispatch(addRequestToQueue());\n      return next.handle(req).pipe(finalize(() => this.store.dispatch(removeRequestFromQueue())));\n    }\n\n  }\n\n  TokenInterceptorService.ɵfac = function TokenInterceptorService_Factory(t) {\n    return new (t || TokenInterceptorService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Store));\n  };\n\n  TokenInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenInterceptorService,\n    factory: TokenInterceptorService.ɵfac\n  });\n  return TokenInterceptorService;\n})();","map":null,"metadata":{},"sourceType":"module"}