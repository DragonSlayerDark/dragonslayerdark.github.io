{"ast":null,"code":"import { createReducer, on } from '@ngrx/store';\nimport * as auth from './auth.actions';\n;\nconst initialState = {\n  token: null,\n  usuario: null,\n  cargando: false,\n  error: null,\n  friends: []\n};\nexport const authreducer = createReducer(initialState, on(auth.login, state => Object.assign(Object.assign({}, state), {\n  cargando: true,\n  error: null\n})), on(auth.loginSuccess, (state, {\n  jwt\n}) => Object.assign(Object.assign({}, state), {\n  cargando: false,\n  token: jwt\n})), on(auth.loginFailure, (state, {\n  error\n}) => Object.assign(Object.assign({}, state), {\n  cargando: false,\n  error: Object.assign({}, error)\n})), on(auth.cerrarSesion, state => Object.assign({}, initialState)), on(auth.llenarSesion, (state, {\n  usuario\n}) => Object.assign(Object.assign({}, state), {\n  usuario: Object.assign({}, usuario)\n})), on(auth.getMe, state => Object.assign(Object.assign({}, state), {\n  error: null\n})), on(auth.getMeSuccess, (state, {\n  usuario\n}) => Object.assign(Object.assign({}, state), {\n  // cargando: false,\n  usuario: Object.assign({}, usuario)\n})), on(auth.actualizarUser, state => Object.assign(Object.assign({}, state), {\n  cargando: true,\n  error: null\n})), on(auth.actualizarUserSuccess, (state, {\n  usuario\n}) => Object.assign(Object.assign({}, state), {\n  cargando: false,\n  usuario: Object.assign({}, usuario),\n  error: null\n})), on(auth.actualizarUserFailure, (state, {\n  error\n}) => Object.assign(Object.assign({}, state), {\n  cargando: false,\n  error: Object.assign({}, error)\n})), on(auth.getMeFailure, (state, {\n  error\n}) => Object.assign(Object.assign({}, state), {\n  // cargando: false,\n  usuario: null,\n  error: Object.assign({}, error)\n})), on(auth.getRecoveryToken, state => Object.assign(Object.assign({}, state), {\n  cargando: true,\n  error: null\n})), on(auth.getRecoveryTokenSuccess, state => Object.assign(Object.assign({}, state), {\n  cargando: false,\n  error: null\n})), on(auth.getRecoveryTokenFailure, (state, {\n  error\n}) => Object.assign(Object.assign({}, state), {\n  cargando: false,\n  error: Object.assign({}, error)\n})), on(auth.passwordRecovery, state => Object.assign(Object.assign({}, state), {\n  cargando: true,\n  error: null\n})), on(auth.passwordRecoverySuccess, state => Object.assign(Object.assign({}, state), {\n  cargando: false,\n  error: null\n})), on(auth.passwordRecoveryFailure, (state, {\n  error\n}) => Object.assign(Object.assign({}, state), {\n  cargando: false,\n  error: Object.assign({}, error)\n})), on(auth.getFriendsSuccess, (state, {\n  usuarios\n}) => Object.assign(Object.assign({}, state), {\n  cargando: false,\n  friends: [...usuarios],\n  error: null\n})), on(auth.getFriendsFailure, (state, {\n  error\n}) => Object.assign(Object.assign({}, state), {\n  cargando: false,\n  friends: null,\n  error: Object.assign({}, error)\n})), on(auth.deleteAccount, state => Object.assign(Object.assign({}, state), {\n  cargando: true,\n  error: null\n})), on(auth.deleteAccountSuccess, state => Object.assign(Object.assign({}, state), {\n  cargando: false,\n  error: null\n})), on(auth.backUpAccount, state => Object.assign(Object.assign({}, state), {\n  cargando: true,\n  error: null\n})), on(auth.backUpAccountSuccess, (state, {\n  usuario\n}) => Object.assign(Object.assign({}, state), {\n  cargando: false,\n  error: null,\n  backup: Object.assign({}, usuario)\n})));","map":null,"metadata":{},"sourceType":"module"}