{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport * as actions from '../actions/push-notifications.actions';\nimport { map, catchError, of, switchMap, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../../modules/shared/shared.service\";\nimport * as i3 from \"../services/push-notification.service\";\nexport let usuarioEffects = /*#__PURE__*/(() => {\n  class usuarioEffects {\n    constructor(actions$, shared, notificacionPushService) {\n      this.actions$ = actions$;\n      this.shared = shared;\n      this.notificacionPushService = notificacionPushService;\n      this.createDeviceToken$ = createEffect(() => this.actions$.pipe(ofType(actions.addToken), switchMap(({\n        devicePushNotifications\n      }) => this.notificacionPushService.saveToken(devicePushNotifications).pipe(map(x => actions.addTokenSuccess({\n        devicePushNotifications: x.data\n      })), tap(() => {// this.shared.sendAlert('success', 'Notificaciones', 'Se Enviaran notificaciones de forma exitosa');\n      }), catchError(err => of(actions.addTokenError({\n        payload: err\n      })))))));\n    }\n\n  }\n\n  usuarioEffects.ɵfac = function usuarioEffects_Factory(t) {\n    return new (t || usuarioEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.SharedService), i0.ɵɵinject(i3.NotificacionPushService));\n  };\n\n  usuarioEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: usuarioEffects,\n    factory: usuarioEffects.ɵfac\n  });\n  return usuarioEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}