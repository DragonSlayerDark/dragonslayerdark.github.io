{"ast":null,"code":"import { gql } from 'apollo-angular';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"apollo-angular\";\nimport * as i2 from \"src/app/auth_services/store/auth.service\";\nexport let AddressService = /*#__PURE__*/(() => {\n  class AddressService {\n    constructor(apollo, auth) {\n      this.apollo = apollo;\n      this.auth = auth;\n      this.MODIFY_ADDRESSES = gql`\n  mutation ($id: ID!, $addresses: UsersPermissionsUserInput!) {\n    updateUsersPermissionsUser (id: $id, data: $addresses) {\n      data {\n        attributes {\n          address {\n            id\n            street\n            city\n            state\n            zip\n            country\n            name\n          }\n        }\n      }\n    }\n  }`;\n    }\n\n    getAddresses(userID) {\n      console.log(\"GET ADDRESSES OTRA VEZ\");\n      return this.apollo.query({\n        query: gql`\n        query {\n          usersPermissionsUser (id: ${userID}) {\n            data {\n              id\n              attributes {\n                address {\n                  id\n                  street\n                  city\n                  state\n                  zip\n                  country\n                  name\n                }\n              }\n            }\n          }\n        }\n      `\n      }).pipe(map(x => {\n        let response = JSON.parse(JSON.stringify(x.data['usersPermissionsUser'].data.attributes.address));\n        response.map(y => {\n          delete y['__typename'];\n          return y;\n        });\n        console.log(\"RESPONSE\", response);\n        return response;\n      }));\n    }\n\n    deleteAddress(id, currentAddress) {\n      let newAddress = currentAddress.filter(x => x.id !== id);\n      console.log(newAddress);\n      return this.apollo.mutate({\n        mutation: this.MODIFY_ADDRESSES,\n        variables: {\n          addresses: {\n            address: newAddress\n          },\n          id: this.auth.getId()\n        }\n      }).pipe(map(x => {\n        let response = x.data['updateUsersPermissionsUser'].data.attributes.address;\n        delete response.__typename;\n        return response;\n      }));\n    }\n\n    addAddress(city, country, state, street, zip, name, currentAddress) {\n      currentAddress.push({\n        city: city,\n        country: country,\n        state: state,\n        street: street,\n        zip: zip,\n        name: name\n      });\n      return this.apollo.mutate({\n        mutation: this.MODIFY_ADDRESSES,\n        variables: {\n          addresses: {\n            address: currentAddress\n          },\n          id: this.auth.getId()\n        }\n      }).pipe(map(x => {\n        let response = x.data['updateUsersPermissionsUser'].data.attributes.address;\n        delete response.__typename;\n        console.log(response); // return the new address\n\n        return response[response.length - 1];\n      }));\n    }\n\n    updateAddress(id, city, country, state, street, zip, name, currentAddress) {\n      let newAddress = currentAddress.filter(x => x.id !== id);\n      newAddress.push({\n        city: city,\n        country: country,\n        state: state,\n        street: street,\n        zip: zip,\n        name: name\n      });\n      return this.apollo.mutate({\n        mutation: this.MODIFY_ADDRESSES,\n        variables: {\n          addresses: {\n            address: newAddress\n          },\n          id: this.auth.getId()\n        }\n      }).pipe(map(x => {\n        let response = x.data['updateUsersPermissionsUser'].data.attributes.address;\n        delete response.__typename;\n        console.log(response); // return the new address\n\n        return response[response.length - 1];\n      }));\n    }\n\n  }\n\n  AddressService.ɵfac = function AddressService_Factory(t) {\n    return new (t || AddressService)(i0.ɵɵinject(i1.Apollo), i0.ɵɵinject(i2.AuthService));\n  };\n\n  AddressService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AddressService,\n    factory: AddressService.ɵfac,\n    providedIn: 'root'\n  });\n  return AddressService;\n})();","map":null,"metadata":{},"sourceType":"module"}