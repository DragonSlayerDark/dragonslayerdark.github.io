{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { catchError, map, of, switchMap } from 'rxjs';\nimport * as vaccineCardActions from '../actions/vaccine-card.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ngrx/effects\";\nimport * as i3 from \"../../custom/services/vaccine-card.service\";\nimport * as i4 from \"src/app/modules/shared/shared.service\";\nexport let VaccineCardEffects = /*#__PURE__*/(() => {\n  class VaccineCardEffects {\n    constructor(http, actions$, vaccineCardService, sharedService) {\n      this.http = http;\n      this.actions$ = actions$;\n      this.vaccineCardService = vaccineCardService;\n      this.sharedService = sharedService;\n      this.addVaccineCard$ = createEffect(() => {\n        return this.actions$.pipe(ofType(vaccineCardActions.addVaccineCard), switchMap(({\n          petID\n        }) => this.vaccineCardService.getVaccineCard(petID).pipe(map(data => vaccineCardActions.addVaccineCardSuccess({\n          vaccineCard: data\n        })), catchError(error => {\n          this.sharedService.sendAlert('error', 'Error', error.error.error.message);\n          return of(vaccineCardActions.failure({\n            error\n          }));\n        }))));\n      });\n      this.upsertVaccineCard$ = createEffect(() => {\n        return this.actions$.pipe(ofType(vaccineCardActions.upsertVaccineCard), switchMap(({\n          petID\n        }) => this.vaccineCardService.getVaccineCard(petID).pipe(map(data => vaccineCardActions.upsertVaccineCardSuccess({\n          vaccineCard: data\n        })), catchError(error => {\n          this.sharedService.sendAlert('error', 'Error', error.error.error.message);\n          return of(vaccineCardActions.failure({\n            error\n          }));\n        }))));\n      });\n      this.updateVaccinesApplied$ = createEffect(() => {\n        return this.actions$.pipe(ofType(vaccineCardActions.updateVaccinesApplied), switchMap(({\n          id,\n          vaccineID,\n          remove,\n          productId,\n          cedula,\n          date,\n          vaccine_card_id\n        }) => this.vaccineCardService.updateAppliedVaccine(id, vaccineID, remove, productId, cedula, date, vaccine_card_id).pipe(switchMap(data => [// vaccineCardActions.updateAppliedVaccinesSuccess({ pet: data }),\n        vaccineCardActions.upsertVaccineCard({\n          petID: id\n        })]), catchError(error => of(vaccineCardActions.failure({\n          error\n        }))))));\n      });\n    }\n\n  }\n\n  VaccineCardEffects.ɵfac = function VaccineCardEffects_Factory(t) {\n    return new (t || VaccineCardEffects)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Actions), i0.ɵɵinject(i3.VaccineCardService), i0.ɵɵinject(i4.SharedService));\n  };\n\n  VaccineCardEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: VaccineCardEffects,\n    factory: VaccineCardEffects.ɵfac,\n    providedIn: 'root'\n  });\n  return VaccineCardEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}