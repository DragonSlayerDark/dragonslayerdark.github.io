{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { catchError, map, of, switchMap } from 'rxjs';\nimport * as fromNotifications from '../actions/notification.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/notification.service\";\nexport let NotificationEffects = /*#__PURE__*/(() => {\n  class NotificationEffects {\n    constructor(actions$, notificationService) {\n      this.actions$ = actions$;\n      this.notificationService = notificationService;\n      this.loadNotifications$ = createEffect(() => this.actions$.pipe(ofType(fromNotifications.loadNotification), switchMap(({\n        id\n      }) => this.notificationService.getNotifications(id).pipe(map(data => fromNotifications.loadNotificationSuccess({\n        notification: data.data\n      })), catchError(err => of(fromNotifications.loadNotificationError({\n        payload: err\n      })))))));\n    }\n\n  }\n\n  NotificationEffects.ɵfac = function NotificationEffects_Factory(t) {\n    return new (t || NotificationEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.NotificationService));\n  };\n\n  NotificationEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotificationEffects,\n    factory: NotificationEffects.ɵfac\n  });\n  return NotificationEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}