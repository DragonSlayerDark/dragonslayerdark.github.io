{"ast":null,"code":"import { createReducer, on } from \"@ngrx/store\";\nimport * as fromCart from \"../actions/cart.actions\";\nexport const cartFeatureKey = 'cart';\nexport const initialState = {\n  products: [],\n  user: null\n};\nexport const reducer = createReducer(initialState, on(fromCart.addProductToCart, (state, {\n  product\n}) => Object.assign(Object.assign({}, state), {\n  // Find if product is already in cart, if it is, increase quantity, if not add it to cart\n  products: state.products.find(p => p.product.id === product.id) ? state.products.map(p => p.product.id === product.id ? {\n    product,\n    quantity: p.quantity + 1\n  } : p) : [...state.products, {\n    product,\n    quantity: 1\n  }]\n})), on(fromCart.addProductsToCart, (state, {\n  product,\n  quantity\n}) => Object.assign(Object.assign({}, state), {\n  // Find if product is already in cart, if it is, increase quantity, if not add it to cart\n  products: state.products.find(p => p.product.id === product.id) ? state.products.map(p => p.product.id === product.id ? {\n    product,\n    quantity: p.quantity + quantity\n  } : p) : [...state.products, {\n    product,\n    quantity: quantity\n  }]\n})), on(fromCart.loadSavedSuccess, (state, {\n  cart\n}) => Object.assign(Object.assign({}, state), {\n  products: cart\n})), on(fromCart.modifyCart, (state, {\n  itemID,\n  add\n}) => Object.assign(Object.assign({}, state), {\n  products: state.products.map(p => p.product.id === itemID ? {\n    product: p.product,\n    quantity: add ? p.quantity + 1 : p.quantity - 1\n  } : p)\n})), on(fromCart.removeProductFromCart, (state, {\n  productID\n}) => Object.assign(Object.assign({}, state), {\n  products: state.products.filter(p => p.product.id !== productID)\n})), on(fromCart.clearCart, state => Object.assign(Object.assign({}, state), {\n  products: []\n})), on(fromCart.getNetpayClientSuccess, (state, {\n  userPayload\n}) => Object.assign(Object.assign({}, state), {\n  user: userPayload\n})));","map":null,"metadata":{},"sourceType":"module"}