{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { catchError, map, of, switchMap } from 'rxjs';\nimport * as dewormerActions from '../actions/dewormer.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/dewormer.service\";\nimport * as i3 from \"src/app/modules/shared/shared.service\";\nexport let DewormerEffects = /*#__PURE__*/(() => {\n  class DewormerEffects {\n    constructor(actions$, dewormerService, sharedService) {\n      this.actions$ = actions$;\n      this.dewormerService = dewormerService;\n      this.sharedService = sharedService;\n      this.addDewormer$ = createEffect(() => {\n        return this.actions$.pipe(ofType(dewormerActions.addDewormer), switchMap(({\n          petID\n        }) => this.dewormerService.getDewormer(petID).pipe(map(data => dewormerActions.addDewormerSuccess({\n          dewormer: data\n        })), catchError(error => {\n          this.sharedService.sendAlert('error', 'Error', error.error.error.message);\n          return of(dewormerActions.failure({\n            error\n          }));\n        }))));\n      });\n      this.upsertDewormerCard$ = createEffect(() => {\n        return this.actions$.pipe(ofType(dewormerActions.upsertDewormer), switchMap(({\n          petID\n        }) => this.dewormerService.getDewormer(petID).pipe(map(data => dewormerActions.upsertDewormerSuccess({\n          dewormer: data\n        })), catchError(error => {\n          this.sharedService.sendAlert('error', 'Error', error.error.error.message);\n          return of(dewormerActions.failure({\n            error\n          }));\n        }))));\n      });\n      this.updateDewormersApplied$ = createEffect(() => {\n        return this.actions$.pipe(ofType(dewormerActions.updateDewormersApplied), switchMap(({\n          id,\n          vaccineID,\n          remove,\n          productId,\n          cedula,\n          date,\n          vaccine_card_id\n        }) => this.dewormerService.updateDewormerVaccine(id, vaccineID, remove, productId, cedula, date, vaccine_card_id).pipe(switchMap(data => [// vaccineCardActions.updateAppliedVaccinesSuccess({ pet: data }),\n        dewormerActions.upsertDewormer({\n          petID: id\n        })]), catchError(error => of(dewormerActions.failure({\n          error\n        }))))));\n      });\n    }\n\n  }\n\n  DewormerEffects.ɵfac = function DewormerEffects_Factory(t) {\n    return new (t || DewormerEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.DewormerService), i0.ɵɵinject(i3.SharedService));\n  };\n\n  DewormerEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DewormerEffects,\n    factory: DewormerEffects.ɵfac\n  });\n  return DewormerEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}