{"ast":null,"code":"import { JwtHelperService } from '@auth0/angular-jwt';\nimport { environment } from 'src/environments/environment';\nimport { AuthJSStrapi } from '../auth';\nimport { User } from '../model/user.model';\nimport { cerrarSesion, getMe, llenarSesion } from './auth.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"src/app/modules/shared/shared.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, store, router, shared) {\n      // this.store.select('auth').subscribe((x) => this.auth = x.usuario ? true : false);\n      this.http = http;\n      this.store = store;\n      this.router = router;\n      this.shared = shared;\n      this.auth = false;\n    }\n\n    login(correo, password) {\n      correo.toLowerCase();\n      const formData = new FormData();\n      formData.append('identifier', correo);\n      formData.append('password', password);\n      return this.http.post(this.getRuta(`api/auth/local`), formData);\n    }\n\n    registrar({\n      email,\n      password,\n      lastName,\n      firstName,\n      secondLastName\n    }) {\n      return this.http.post(this.getRuta(`api/auth/local/register`), {\n        email,\n        username: email,\n        password,\n        lastName,\n        firstName,\n        secondLastName\n      });\n    }\n\n    actualizarUser(usuario, img) {\n      const formData = new FormData();\n      formData.append('firstName', usuario.firstName);\n      formData.append('lastName', usuario.lastName);\n      formData.append('secondLastName', usuario.secondLastName);\n      formData.append('email', usuario.email); // formData.append('media', usuario.image)\n\n      if (usuario.password !== '') {\n        formData.append('password', usuario.password);\n      } // formData.append('files.media', img[0]);\n\n\n      return this.http.put(this.getRuta(`api/users/${this.getId()}`), formData);\n    }\n\n    isAuthCheck() {\n      const token = localStorage.getItem('token');\n\n      if (!token) {\n        // No tiene token\n        return false;\n      }\n\n      return true;\n    }\n\n    isAuth() {\n      const token = localStorage.getItem('token');\n      const usuario = localStorage.getItem('usuario');\n\n      if (!token) {\n        // No tiene token\n        this.logout();\n        return false;\n      }\n\n      const helper = new JwtHelperService();\n      const isExpired = helper.isTokenExpired(token);\n\n      if (!isExpired) {\n        // Si no está expirado el token\n        if (!this.auth) {\n          this.store.dispatch(llenarSesion({\n            usuario: this.getUser()\n          })); // Lleno la sesión para evitar errores\n\n          this.store.dispatch(getMe()); // Traigo la información del usuario\n        }\n\n        return true;\n      }\n\n      this.logout(); // Token expirado\n\n      return false;\n    }\n    /**\n     *\n     * @param analizar - Bandera que analiza si necesita enviar a logout si no existe el usuario\n     * @returns\n     */\n\n\n    getUser(analizar = true) {\n      let usuario = localStorage.getItem('usuario');\n\n      if (!usuario) {\n        if (analizar) {\n          this.logout();\n        }\n\n        return null;\n      }\n\n      const usuarioObj = JSON.parse(usuario);\n      usuario = Object.setPrototypeOf(usuario, User.prototype);\n      return usuarioObj;\n    }\n\n    getId() {\n      var _a; // eslint-disable-next-line no-underscore-dangle\n\n\n      return (_a = this.getUser()) === null || _a === void 0 ? void 0 : _a.id;\n    }\n\n    getEmail() {\n      var _a;\n\n      return (_a = this.getUser()) === null || _a === void 0 ? void 0 : _a.email;\n    }\n\n    logout() {\n      this.store.dispatch(cerrarSesion()); // Limpia el store de Auth\n    }\n\n    getToken() {\n      const token = localStorage.getItem('token');\n      return token;\n    }\n\n    getMe() {\n      return this.http.get(this.getRuta(`api/users/me`));\n    }\n\n    verificarNecesitaLogin() {\n      const token = localStorage.getItem('token');\n      const usuario = localStorage.getItem('usuario');\n\n      if (token && usuario) {\n        this.router.navigate(AuthJSStrapi.config.homeRoute);\n        return false;\n      }\n\n      return true;\n    }\n\n    getRuta(ruta) {\n      return `${AuthJSStrapi.config.server}/${ruta}`;\n    }\n\n    getRecoveryToken(email) {\n      return this.http.post(`${environment.server}/auth/forgot-password`, {\n        email\n      });\n    }\n\n    passwordRecovery(code, password, passwordConfirmation) {\n      return this.http.post(`${environment.server}/auth/reset-password`, {\n        code,\n        password,\n        passwordConfirmation\n      });\n    }\n\n    deleteAccount() {\n      return this.http.delete(this.getRuta(`api/users/${this.getId()}`));\n    }\n\n    deletedAccountBackUp(usuario) {\n      const formData = new FormData();\n      formData.append('data', JSON.stringify(Object.assign({}, usuario)));\n      return this.http.post(this.getRuta(`api/backups?populate=*`), formData);\n    }\n\n    checkPetId() {\n      let selectedPetId = localStorage.getItem('selectedPetID');\n\n      if (selectedPetId === null) {\n        this.shared.sendAlert('warning', 'Seleccionar Mascota', 'Por favor seleccione un mascota');\n        this.router.navigate(['/profile', 'petslist']);\n      }\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.SharedService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}