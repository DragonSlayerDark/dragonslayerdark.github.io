{"ast":null,"code":"import { createReducer, on } from '@ngrx/store';\nimport { createEntityAdapter } from '@ngrx/entity';\nimport * as CommercialActions from '../actions/commercial.actions';\nexport const commercialsFeatureKey = 'commercials';\nexport const adapter = createEntityAdapter();\nexport const initialState = adapter.getInitialState({// additional entity state properties\n});\nexport const reducer = createReducer(initialState, on(CommercialActions.addCommercial, (state, action) => adapter.addOne(action.commercial, state)), on(CommercialActions.upsertCommercial, (state, action) => adapter.upsertOne(action.commercial, state)), on(CommercialActions.addCommercials, (state, action) => adapter.addMany(action.commercials, state)), on(CommercialActions.upsertCommercials, (state, action) => adapter.upsertMany(action.commercials, state)), on(CommercialActions.updateCommercial, (state, action) => adapter.updateOne(action.commercial, state)), on(CommercialActions.updateCommercials, (state, action) => adapter.updateMany(action.commercials, state)), on(CommercialActions.deleteCommercial, (state, action) => adapter.removeOne(action.id, state)), on(CommercialActions.deleteCommercials, (state, action) => adapter.removeMany(action.ids, state)), on(CommercialActions.loadCommercialsSuccess, (state, action) => adapter.setAll(action.commercials, state)), on(CommercialActions.clearCommercials, state => adapter.removeAll(state)));\nexport const {\n  selectIds,\n  selectEntities,\n  selectAll,\n  selectTotal\n} = adapter.getSelectors();","map":null,"metadata":{},"sourceType":"module"}