{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { switchMap, map, catchError, of } from 'rxjs';\nimport * as usersActions from '../actions/user.actions';\nimport * as orderActions from '../actions/order.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/panel.service\";\nimport * as i2 from \"@ngrx/effects\";\nexport let PanelEffects = /*#__PURE__*/(() => {\n  class PanelEffects {\n    constructor(panelService, actions$) {\n      this.panelService = panelService;\n      this.actions$ = actions$;\n      this.loadUsers$ = createEffect(() => {\n        return this.actions$.pipe(ofType(usersActions.loadUsers), switchMap(() => this.panelService.getUsers().pipe(map(data => usersActions.loadUsersSuccess({\n          users: data\n        })), catchError(error => of(usersActions.failure({\n          error\n        }))))));\n      });\n      this.loadOrders$ = createEffect(() => {\n        return this.actions$.pipe(ofType(orderActions.loadOrders), switchMap(({\n          userID,\n          pending\n        }) => this.panelService.getOrders(userID, pending).pipe(map(x => orderActions.loadOrdersSuccess({\n          orders: x.data\n        })), catchError(error => of(orderActions.failure({\n          error\n        }))))));\n      });\n    }\n\n  }\n\n  PanelEffects.ɵfac = function PanelEffects_Factory(t) {\n    return new (t || PanelEffects)(i0.ɵɵinject(i1.PanelService), i0.ɵɵinject(i2.Actions));\n  };\n\n  PanelEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PanelEffects,\n    factory: PanelEffects.ɵfac,\n    providedIn: 'root'\n  });\n  return PanelEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}